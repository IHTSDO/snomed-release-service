<beans xmlns="http://www.springframework.org/schema/beans"
		 xmlns:context="http://www.springframework.org/schema/context"
		 xmlns:tx="http://www.springframework.org/schema/tx"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<context:annotation-config />
	<tx:annotation-driven/>

	<!-- Bean to resolve the 'data-service-properties-path' from a system property -->
	<bean id="configurer1" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="placeholderPrefix" value="+{"/>
		<property name="properties">
			<props>
				<!-- Default path to override properties file -->
				<prop key="dataServicePropertiesPath">classpath:data-service.properties</prop>
			</props>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>

	<bean id="configurer2" class="org.ihtsdo.context.OrderedPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- Default properties file -->
				<value>classpath:data-service-defaults.properties</value>
				<!-- Override properties file -->
				<value>+{dataServicePropertiesPath}</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="properties">
			<props>
				<prop key="localRvf">false</prop>
				<!-- New temp directory will be used if property not set -->
				<prop key="s3.offline.directory"></prop>
			</props>
		</property>
	</bean>

	<bean class="org.ihtsdo.buildcloud.dao.ReleaseCenterDAOImpl"/>
	<bean class="org.ihtsdo.buildcloud.dao.ProductDAOImpl"/>
	<bean class="org.ihtsdo.buildcloud.dao.ProductInputFileDAOImpl"/>
	<bean class="org.ihtsdo.buildcloud.dao.UserDAOImpl"/>
	<bean class="org.ihtsdo.buildcloud.dao.ReleaseCenterMembershipDAOImpl"/>
	<bean class="org.ihtsdo.buildcloud.dao.BuildDAOImpl">
		<property name="buildBucketName" ref="buildBucketName"/>
	</bean>
	<bean class="org.ihtsdo.buildcloud.dao.helper.DevDatabasePrimerDAO"/>
	<bean class="org.ihtsdo.buildcloud.dao.AuthTokenDAOImpl"/>

	<bean class="org.ihtsdo.buildcloud.service.UserServiceImpl"/>
	<bean class="org.ihtsdo.buildcloud.service.ReleaseCenterServiceImpl"/>
	<bean class="org.ihtsdo.buildcloud.service.ProductServiceImpl"/>
	<bean class="org.ihtsdo.buildcloud.service.ProductInputFileServiceImpl"/>
	<bean class="org.ihtsdo.buildcloud.service.BuildServiceImpl">
		<property name="fileProcessingFailureMaxRetry" ref="fileProcessingFailureMaxRetry"/>
	</bean>
	<bean class="org.ihtsdo.buildcloud.service.RF2ClassifierService"/>
	<bean class="org.ihtsdo.buildcloud.service.DevDatabasePrimerService"/>
	<bean class="org.ihtsdo.buildcloud.service.AuthenticationServiceImpl"/>
	<bean class="org.ihtsdo.buildcloud.service.PublishServiceImpl">
		<constructor-arg name="buildBucketName" ref="buildBucketName"/>
		<constructor-arg name="publishedBucketName" ref="publishedBucketName"/>
	</bean>
	<bean class="org.ihtsdo.buildcloud.service.RelationshipHelper"/>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${srs.jdbc.driverClassName}" />
		<property name="url" value="${srs.jdbc.url}"/>
		<property name="username" value="${srs.jdbc.username}" />
		<property name="password" value="${srs.jdbc.password}" />
	</bean>
	<bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
		<property name="dataSource" ref="dataSource" />
		<property name="changeLog" value="classpath:org/ihtsdo/srs/db/changelog/db.changelog-master.xml" />
		<!--contexts specifies the runtime contexts to use.-->
		<property name="contexts" value="${srs.environment.shortname}"/>
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>org.ihtsdo.buildcloud.entity</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${srs.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!--  <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<prop key="hibernate.connection.CharSet">utf8</prop>
				<prop key="hibernate.connection.characterEncoding">utf8</prop>
				<prop key="hibernate.connection.useUnicode">true</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean factory-bean="s3ClientFactory" factory-method="getClient">
		<constructor-arg value="${offlineMode}" />
	</bean>

	<bean class="org.ihtsdo.otf.dao.s3.S3ClientFactory" name="s3ClientFactory">
		<property name="onlineImplementation">
			<bean class="org.ihtsdo.otf.dao.s3.S3ClientImpl">
				<constructor-arg>
					<bean class="com.amazonaws.auth.BasicAWSCredentials">
						<constructor-arg value="${aws.key}" />
						<constructor-arg value="${aws.privateKey}" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
		<property name="offlineImplementation">
			<bean class="org.ihtsdo.otf.dao.s3.OfflineS3ClientImpl">
				<constructor-arg value="${s3.offline.directory}"/>
			</bean>
		</property>
	</bean>

	<bean class="org.ihtsdo.otf.dao.s3.helper.S3ClientHelper"/>

	<bean class="java.lang.String" id="buildBucketName">
		<constructor-arg value="${buildBucketName}" />
	</bean>

	<bean class="java.lang.String" id="publishedBucketName">
		<constructor-arg value="${publishedBucketName}" />
	</bean>

	<bean class="java.lang.Integer" id="fileProcessingFailureMaxRetry">
		<constructor-arg value="${fileProcessing.failureMaxRetry}"/>
	</bean>

	<bean class="java.lang.Integer" id="transformBufferSize">
		<constructor-arg value="${transformBufferSize}"/>
	</bean>

	<bean class="java.lang.Integer" id="idGenMaxTries">
		<constructor-arg value="${idGenerator.maxTries}"/>
	</bean>

	<bean class="java.lang.Integer" id="idGenRetryDelaySeconds">
		<constructor-arg value="${idGenerator.retryDelaySeconds}"/>
	</bean>

	<bean class="java.lang.Boolean" id="offlineMode" >
		<constructor-arg value="${offlineMode}"/>
	</bean>

	<!-- Used to enable RVF calls when in offlineMode is true -->
	<bean class="java.lang.Boolean" id="localRvf" >
		<constructor-arg value="${localRvf}"/>
	</bean>

	<bean factory-bean="objectMapperFactory" factory-method="createObjectMapper"/>

	<bean id="objectMapperFactory" class="org.ihtsdo.buildcloud.service.mapping.JacksonObjectMapperFactory"/>

	<bean class="org.ihtsdo.buildcloud.dao.helper.BuildS3PathHelper"/>

	<bean class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${encryption.salt}"/>
	</bean>

	<bean class="org.springframework.security.crypto.keygen.KeyGenerators" factory-method="string"/>

	<bean class="org.ihtsdo.buildcloud.service.precondition.PreconditionManager">
		<property name="preconditionChecks">
			<list>
				<bean class="org.ihtsdo.buildcloud.service.precondition.ConfigurationCheck"/>
				<bean class="org.ihtsdo.buildcloud.service.precondition.ManifestCheck"/>
				<bean class="org.ihtsdo.buildcloud.service.precondition.InputFilesExistenceCheck"/>
				<bean class="org.ihtsdo.buildcloud.service.precondition.RF2FilesCheck"/>
			</list>
		</property>
		<property name="offlineMode" value="${offlineMode}"/>
	</bean>

	<bean id="releaseValidationFrameworkUrl" class="java.lang.String" >
		<constructor-arg value="${releaseValidationFramework.url}"/>
	</bean>

	<bean class="org.ihtsdo.buildcloud.service.build.readme.ReadmeGenerator" />

	<bean class="org.ihtsdo.snomed.util.rf2.schema.SchemaFactory"/>
	<bean class="org.ihtsdo.buildcloud.service.build.transform.LegacyIdTransformationService"/>
	<bean class="org.ihtsdo.buildcloud.service.build.transform.TransformationService"/>


	<bean class="org.ihtsdo.buildcloud.service.workbenchdatafix.ModuleResolverService">
		<constructor-arg value="${snomed.modelModuleSctid}"/>
		<constructor-arg value="${snomed.isARelationshipTypeSctid}"/>
	</bean>

	<bean class="java.lang.String" id="coreModuleSctid">
		<constructor-arg value="${snomed.coreModuleSctid}"/>
	</bean>

	<bean class="java.lang.String" id="modelModuleSctid">
		<constructor-arg value="${snomed.modelModuleSctid}"/>
	</bean>
	<bean factory-bean="idServiceClientFactory" factory-method="getInstance">
		<constructor-arg value="${offlineMode}" />
	</bean>

	<bean class="org.ihtsdo.buildcloud.service.identifier.client.IdServiceRestClientFactory" name="idServiceClientFactory">
		<constructor-arg>
			<bean class="org.ihtsdo.buildcloud.service.identifier.client.IdServiceRestClientImpl">
				<constructor-arg value="${idGenerator.url}" />
				<constructor-arg value="${idGenerator.userName}" />
				<constructor-arg value="${idGenerator.password}" />
				<property name="timeOutInSeconds" value="${idGenerator.timeoutInSeconds}"/>
				<property name="maxTries" ref = "idGenMaxTries" />
				<property name="retryDelaySeconds" ref = "idGenRetryDelaySeconds" />
				<property name="batchSize" value="${idGenerator.batchSize}"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.ihtsdo.buildcloud.service.identifier.client.IdServiceRestClientOfflineDemoImpl"/>
		</constructor-arg>
	</bean>

	<bean factory-bean="uuIdGeneratorFactory" factory-method="getInstance">
		<constructor-arg value="${offlineMode}" />
	</bean>
	<bean class="org.ihtsdo.buildcloud.service.build.transform.UUIDGeneratorFactory" name ="uuIdGeneratorFactory">
		<constructor-arg>
			<bean class="org.ihtsdo.buildcloud.service.build.transform.RandomUUIDGenerator"/>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.ihtsdo.buildcloud.service.build.transform.PesudoUUIDGenerator"/>
		</constructor-arg>
	</bean>
</beans>
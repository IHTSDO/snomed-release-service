#---------------------------------------------------------
# Spring security
srs.basicAuth.username = changeme
srs.basicAuth.password = changeme
encryption.salt = 7aff989ff7dd09c5

# ------------------------------------------------
# use native support for forwarded headers as spring boot 2.2 onwards will ignore X-Forwarded-* headers by default.
server.forward-headers-strategy=NATIVE

# ------------------------------------------------
# AWS config
# These will be removed when using resource manager
#
# This file defines the default properties.
# The application will build and run with these properties, although no online features will be available.
#
# AWS Keys
aws.key =
aws.privateKey =

# spring cloud aws config
cloud.aws.region.static = us-east-1
cloud.aws.stack.auto = false
cloud.aws.credentials.instance-profile = true
cloud.aws.credentials.use-default-aws-credentials-chain = true


# ----------------------------------------
# CIS Identifier Generation config
#
#
cis.url =
cis.userName =
cis.password =
cis.timeoutInSeconds = 300
cis.batchSize = 500
cis.maxTries = 5
cis.retryDelaySeconds = 30

#-------------------------------
# Config for SRS application deployment for autoscaling
# Only one instance should be deployed as manager which is responsible for
# queueing build request and processing build status from workers.
# An instance will become a worker when srs.worker is set true
#
srs.manager = true
srs.worker = true

# Data source config
srs.jdbc.driverClassName = org.h2.Driver
srs.jdbc.url = jdbc:h2:mem:srs;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
srs.jdbc.username = sa
srs.jdbc.password =
srs.hibernate.dialect = org.hibernate.dialect.H2Dialect
srs.environment.shortname = local


# By default start an embedded broker
# SRS build job message queue
spring.activemq.broker-url=vm://localhost:61617
spring.activemq.user=
spring.activemq.password=
spring.activemq.queuePrefetch=1

srs.jms.queue.prefix = local-srs
srs.jms.queue.concurrency=2

# Time to live for the job status update messages sent to the client
#srs.jms.status.time-to-live-seconds = 3600

# Classification service config for pre and post checks of release package
classification-service.url = http://localhost:8085/classification-service
classification-service.username =
classification-service.password =
classification-service.timeoutInSeconds = 18000

#-----------------------------------
# Snowstorm Server
#
snowstorm.url = http://localhost:8080/snowstorm/snomed-ct/
snowstorm.reasonerId = org.semanticweb.elk.elk.reasoner.factory


# SRS build resource config
srs.build.externally-maintained-bucketName=local.external.bucket
srs.build.bucketName = local.build.bucket
srs.build.published.bucketName = local.snomed.international.bucket
srs.build.published.releases.path = releases/published/
srs.build.publish.job.path = releases/published/
srs.build.versioned-content.bucketName = local.snomed.international.bucket
srs.build.versioned-content.path = authoring/version-content/


# daily build storage for browser import
dailybuild.storage.readonly = false
dailybuild.storage.local.path = store/local/
dailybuild.storage.useCloud = false
dailybuild.storage.cloud.bucketName =
dailybuild.storage.cloud.path =

# RVF validation config
rvf.url =

# Max upload file size.
spring.servlet.multipart.max-file-size=512MB
spring.servlet.multipart.max-request-size=512MB

# SRS general config
srs.build.offlineMode = true
srs.build.s3.offline.directory = tmp
srs.file-processing.failureMaxRetry = 3
srs.file-processing.transformBufferSize = 10000

# The max number of times SRS will retry when branch is locked in snowstorm
srs.file-export.max.retry = 3

# Retry delay in millis
srs.file-export.retry.delay = 30000
# To control async execution thread pool
delegate.security.context.async.task.executor.thread.pool.size = 10

srs.release.package.pattern = ^x?SnomedCT_[^_]+(Edition|Extension)?(RF1|RF2)?_(?i)(DAILYBUILD|ALPHA|BETA|PREPRODUCTION|PRODUCTION)+([_].*)?_\\d{8}T\\d{6}Z$

